#!/usr/bin/env python3
#
# import_google_fonts
#
# Using Python rather than Ruby for the Protocol Buffer parser.
# https://github.com/protocolbuffers/protobuf/issues/6508#issuecomment-522165498
#
# To install dependencies:
#
#   pip install gftools html2text jinja2 protobuf

from functools import reduce
from glob import glob
import os
import re
import sys
from google.protobuf import text_format
import gftools.fonts_public_pb2 as fonts_pb2
import jinja2
import html2text

def parse_metadata(filename):
    # based off of
    # https://github.com/googlefonts/gftools/blob/2bfd4acd402b353aaeb46b991e6cad855001e4c8/Lib/gftools/util/google_fonts.py
    with open(filename) as f:
        meta = fonts_pb2.FamilyProto()
        text_format.Merge(f.read(), meta)
        return meta


class FontCask:
    ENVIRONMENT = jinja2.Environment(
        keep_trailing_newline=True, trim_blocks=True, undefined=jinja2.StrictUndefined,
    )
    TEMPLATE = ENVIRONMENT.from_string(
        """cask "{{token}}" do
  version :latest
  sha256 :no_check

{% if files|length == 1 %}
  url "https://github.com/google/fonts/raw/main/{{folder}}/{{files[0] | urlencode}}",
      verified: "github.com/google/fonts/"
{% else %}
  url "https://github.com/google/fonts/trunk/{{folder}}",
      verified:   "github.com/google/fonts/",
      using:      :svn,
      trust_cert: true
{% endif %}
  name "{{font_name}}"
{% if desc %}
  desc "{{desc}}"
{% endif %}
  homepage "{{homepage}}"

{% for file in files %}
  font "{{file}}"
{% endfor %}
end
"""
    )

    def __init__(self, folder, meta, description=None, early_access=False):
        self.folder = folder
        self.meta = meta
        self.desc = description
        self.early_access = early_access

    def font_name(self):
        return self.meta.name

    def description(self):
        if not self.desc:
          return None

        if len(self.desc) == 0:
          return None

        return self.desc

    def token(self):
        # https://github.com/Homebrew/homebrew-cask-fonts/blob/master/CONTRIBUTING.md#converting-the-canonical-name-to-a-token
        token = self.font_name().lower().replace(" ", "-")
        return f"font-{token}"

    def dest_path(self):
        return os.path.join("Casks", f"{self.token()}.rb")

    def name_path(self):
        return self.font_name().replace(" ", "+")

    def homepage(self):
        if self.early_access:
            return f"https://fonts.google.com/earlyaccess"

        return f"https://fonts.google.com/specimen/{self.name_path()}"

    def files(self):
        results = [font.filename for font in self.meta.fonts]
        results.sort()
        return results

    def cask_content(self):
        return self.TEMPLATE.render(
            token=self.token(),
            folder=self.folder,
            font_name=self.font_name(),
            desc=self.description(),
            homepage=self.homepage(),
            files=self.files(),
        )


def is_other_foundry(cask_path):
    with open(cask_path) as f:
        contents = f.read()

    return not re.search(r"url ['\"]https://github.com/google/fonts", contents)


def should_skip(cask_path):
    if os.path.exists(cask_path):
        # Cask already exists
        if is_other_foundry(cask_path):
            print("Other foundry:", cask_path)
            # don't overwrite it, per
            # https://github.com/Homebrew/homebrew-cask-fonts/blob/master/CONTRIBUTING.md#google-web-font-directory
            return True

    return False


def metadata_to_cask(meta_file, repo_dir):
    folder = os.path.dirname(os.path.relpath(meta_file, start=repo_dir))
    meta = parse_metadata(meta_file)

    description_path = os.path.join(os.path.dirname(meta_file), "DESCRIPTION.en_us.html")

    description = None

    if os.path.exists(description_path):
      with open(description_path) as f:
        h2t = html2text.HTML2Text()
        h2t.ignore_links = True
        h2t.ignore_images = True
        h2t.ignore_tables = True
        h2t.ignore_emphasis = True

        contents = " ".join(h2t.handle(f.read()).replace('"', '').split())

        regex = r".*" + re.escape(meta.name) + r"\s+(?:.*\s+)?is(?:\s+an?|the)?\s+"
        parts = re.split(regex, contents, maxsplit=1)

        if len(parts) > 1:
          description = parts[1].split(".")[0].capitalize()

    return FontCask(folder, meta, description=description)


def write_cask(cask):
    if should_skip(cask.dest_path()):
        return

    with open(cask.dest_path(), "w") as f:
        f.write(cask.cask_content())


def find_google_casks():
  casks = {}

  for cask_path in glob('Casks/*.rb'):
    token = os.path.splitext(os.path.basename(cask_path))[0]

    with open(cask_path, "r") as f:
      contents = f.read()

      if not re.search(r"(fonts\.google\.com|google\.com/fonts)", contents):
        continue

      desc = re.search(r"desc\s+([\"'])(.*)(\1)\s*", contents)
      if desc:
        description = desc[2]
      else:
        description = None

    casks[token] = {
      "path": cask_path,
      "description": description,
    }

  return casks

def find_family_folders(repo_dir):
    SUBDIRS = ["apache", "ofl", "ufl"]
    folders_list = [glob(os.path.join(repo_dir, subdir, "*")) for subdir in SUBDIRS]
    # flatten
    return reduce(lambda x, y: x + y, folders_list)


# https://www.geeksforgeeks.org/python-split-camelcase-string-to-individual-strings/
def camel_case_split(str):
    return re.findall(r"[A-Z](?:[a-z]+|[A-Z]*(?=[A-Z]|$))", str)


def derive_name(font_file):
    parent_dir_name = os.path.basename(os.path.dirname(font_file))

    font_file = os.path.splitext(os.path.basename(font_file))[0]
    font_file = font_file[: len(parent_dir_name)]
    font_file = re.sub(r"-\w+$", "", font_file)

    name_parts = camel_case_split(font_file)
    result = " ".join(name_parts)
    return result


def derive_metadata(family_folder):
    """Create a metadata object based on the contents of the folder."""

    meta = fonts_pb2.FamilyProto()

    font_files = glob(os.path.join(family_folder, "*.ttf"))
    # grab the first font, arbitrarily
    meta.name = derive_name(font_files[0])

    fonts = [
        fonts_pb2.FontProto(filename=os.path.basename(filename))
        for filename in font_files
    ]
    meta.fonts.extend(fonts)

    return meta


def derive_cask(family_folder, repo_dir):
    meta = derive_metadata(family_folder)
    folder = os.path.relpath(family_folder, start=repo_dir)

    early_access_file = os.path.join(family_folder, "EARLY_ACCESS.category")
    early_access = os.path.exists(early_access_file)

    return FontCask(folder, meta, early_access=early_access)


def run():
    if len(sys.argv) != 3:
        print(
            """Usage: ./import_google_fonts <path-to-repo> [<mode>]

Download the or clone the repository from https://github.com/google/fonts, then provide the path to the script.
    """
        )
        sys.exit(1)

    repo_dir = sys.argv[1]
    mode = sys.argv[2]
    family_folders = find_family_folders(repo_dir)

    existing_casks = find_google_casks()
    new_casks = {}

    for family_folder in family_folders:
        meta_file = os.path.join(family_folder, "METADATA.pb")
        # check if the metadata file is present
        # https://github.com/google/fonts/issues/2512
        if os.path.exists(meta_file):
            cask = metadata_to_cask(meta_file, repo_dir)
        else:
            cask = derive_cask(family_folder, repo_dir)

        existing_cask = existing_casks.pop(cask.token(), None)
        if existing_cask:
            cask.desc = existing_cask["description"]

        if cask.token() in new_casks:
            continue
        else:
            new_casks[cask.token()] = cask

        cask_existed = existing_cask is not None
        if not mode or (mode == "add" and not cask_existed) or (mode == "update" and cask_existed):
          write_cask(cask)

    if not mode or mode == "delete":
      # Delete casks which don't exist anymore.
      for deleted_cask in existing_casks.values():
        os.remove(deleted_cask["path"])

run()
